
# Total Fertility in Districts by mothers place of birth and age -----
# This program calculates fertility rates based on data from Greenland
# https://bank.stat.gl
#
# the R package statgl holds functions to fetch data
#
# Also it generates the multilingual px-file that is uploaded to the Statbank
#
# This is done by functions in PXJob (by Stat.fi). For simplicity needed
# functionality is put into the R package DoPxR
#
# LarsP, Statistics Greenland 2021
#

# Preface ------------------------------------------------------------
rm(list = ls())

#install.packages("devtools")
#library(devtools)
#devtools::install_github("StatisticsGreenland/statgl")
#devtools::install_github("LarsLap/DoPxR")

library(tidyverse)
library("statgl") # Info at www.stat.gl/SBE202003/o1
library(DoPxR)
pxjob <- c(system.file(package = "DoPxR","PxJob64.exe"))

setwd("C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/SF")

# Formats ------------------------------------------------------------

#Text to code
by_omrade_n <- c("Hele landet" = 0,
                 "Nanortalik" = 1,
                 "Qaqortoq" = 2,
                 "Narsaq" = 3,
                 "Paamiut" = 5,
                 "Nuuk" = 6,
                 "Maniitsoq" = 7,
                 "Sisimiut" = 8,
                 "Kangaatsiaq" = 9,
                 "Aasiaat" = 10,
                 "Qasigiannguit" = 11,
                 "Ilulissat" = 12,
                 "Qeqertarsuaq" = 14,
                 "Uummannaq" = 15,
                 "Upernavik" = 16,
                 "Qaanaaq" = 17,
                 "Tasiilaq" = 18,
                 "Ittoqqortoormiit" = 19)

by_pob_n <- c("I alt" = 0,
                 "Grønland" = 1,
                 "Udenfor Grønland" = 2)

# Get data ------------------------------------------------------------
# The dataset is fetched from from bank.stat.gl.
SF1549 <-
  statgl_fetch(statgl_url("BEXBBLK3",lang = "da"),
                        age = px_all("*"),"place of birth" = px_all("*"),
                        type = px_all("*"), district = px_all("*"),
                        time = px_all("*"), .col_code = TRUE, .val_code = FALSE) %>%
  rename(pob="place of birth") %>%
  filter(district != "Andre lokaliteter") %>%
  filter(district != "Ivittuut")

# The dataset fetched is missing totals for (mothers)'place of birth'.
SF1549_pob_tot <- SF1549 %>%
  group_by(time,district,age,type) %>%
    summarise(value = sum(value)) %>%
  ungroup() %>%
  mutate(pob = "I alt")

# Join totals to data and calculate 'Agespecific Fertility'
SF_tmp <- full_join(SF1549,SF1549_pob_tot,by=c("time"="time","district"="district","pob"="pob","age"="age","type"="type","value"="value"),keep = F) %>%
  spread(type, value = value) %>%
  mutate(SF = (Levendefødte / Middelfolketal) * 1000 ) %>%
  select(time,district,pob,age,SF) %>%
  group_by(time,district,pob,age) %>%
    summarise(SF = sum(SF)) %>%
  ungroup() %>%
  mutate(alder.c = as.character(age)) %>%
  mutate(age = as.numeric(age))

# Calculate 'Total Fertility'
SF_tot <- SF_tmp %>%
  select(time,district,age,pob,SF) %>%
  group_by(time,district,pob) %>%
  summarise(SF = sum(SF)) %>%
  ungroup() %>%
  mutate(alder.c = "I alt (Samlet fertilitet)") %>%
  mutate(age = -1)


# Join totals to data and finalize the 'structural table' for PXJob
SF <- full_join(SF_tmp,SF_tot,by=c("time"="time","district"="district","pob"="pob","age"="age","alder.c"="alder.c","SF"="SF"),keep = F) %>%
  mutate(omrade_n = by_omrade_n[district] %>%
           as.numeric()) %>%
  mutate(pob_n = by_pob_n[pob] %>%
           as.numeric()) %>%
  arrange(time,omrade_n,pob_n,age) %>%
  select(-omrade_n,-pob_n,-age) %>%
  rename(age = alder.c) %>%
  select(time,district,pob,age,SF) %>%
  rename("mothers place of birth" = pob) %>%
  mutate(SF = sprintf("%0.2f", SF))


# clear memory for not needed files
rm(SF_tmp,SF_tot,SF1549,SF1549_pob_tot,by_omrade_n)



# setup Do_Px ------------------------------------------------------------

tmp_file = "output_tmp.csv"
ctl_file = "control.csv"

matrix = "BEXBBSF3"
title = c("Total Fertility in Districts by Place of Birth;en,da,kl")
languagecode = "languagecode;en;da;kl"
variables = "VARIABLES;time,district,mothers place of birth,age;tid,område,moders fødested,alder;tid kl,omr kl,pob kl,alder kl"
contents = "CONTENTS;Agespecific fertility;Aldersbetinget fertilitet;Aldersbetinget fertilitet kl"


# Do_Px
#1 Write data to csv file
write.table_with_header(SF,tmp_file,title,sep=';')
write_lines("",tmp_file, append = TRUE)
write_lines("",tmp_file, append = TRUE)
write_lines(languagecode,tmp_file, append = TRUE)
write_lines(variables,tmp_file, append = TRUE)
write_lines(contents,tmp_file, append = TRUE)



# convert to px
#pxjob(tmp_file,paste(matrix,".px",sep=""))
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
if (file.exists(tmp_file)) {file.remove(tmp_file)}

# Pivot
  # Do control file
    writeLines("STUB;HEADING",ctl_file)
    write_lines("district,mothers place of birth,age;time",ctl_file, append = TRUE)

    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

  #Delete file if it exists
    if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Pivot

# Matrix, Subject-code
    # Do control file
    writeLines("MATRIX;SUBJECT-CODE",ctl_file)
    write_lines(matrix,ctl_file, append = TRUE)
    write_lines(";BE;",ctl_file, append = TRUE)

    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

    #Delete file if it exists
    if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Matrix

# Subject-area, units
    # Do control file
    writeLines("SUBJECT-AREA;UNITS;languagecode",ctl_file)
    write_lines("Population;;en",ctl_file, append = TRUE)
    write_lines("Befolkning;;da",ctl_file, append = TRUE)
    write_lines("Innuttaasut;;kl",ctl_file, append = TRUE)
    write_lines(";rate;en",ctl_file, append = TRUE)
    write_lines(";kvotient;da",ctl_file, append = TRUE)
    write_lines(";kvotient;kl",ctl_file, append = TRUE)

    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

  #Delete file if it exists
  if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Subject-area, units


# Description
    # Do control file
    writeLines("DESCRIPTION;languagecode",ctl_file)
    write_lines("Fertility in Disticts <em>[BEEBBSF3]</em>;en",ctl_file, append = TRUE)
    write_lines("Aldersbetinget fertilitet i distrikterne <em>[BEDBBSF3]</em>;da",ctl_file, append = TRUE)
    write_lines("kl Aldersbetinget fertilitet i distrikterne <em>[BEKBBSF3]</em>;kl",ctl_file, append = TRUE)

    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

    #Delete file if it exists
    if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Description

# Timeval
  # Do control file
    write_lines("TIMEVAL;A",ctl_file, append = TRUE)
    write_lines("variablename;time",ctl_file, append = TRUE)
  #
    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

  #Delete file if it exists
    if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Description

# Elimination
    # Do control file
    writeLines("ELIMINATION;languagecode;variablename",ctl_file)
    write_lines("Hele landet;en;district",ctl_file, append = TRUE)
    write_lines("Hele landet;da;område",ctl_file, append = TRUE)
    write_lines("Hele landet;kl;omr kl",ctl_file, append = TRUE)
    #
    write_lines("I alt;en;mothers place of birth",ctl_file, append = TRUE)
    write_lines("I alt;da;moders fødested",ctl_file, append = TRUE)
    write_lines("I alt;kl;pob kl",ctl_file, append = TRUE)
    #
    write_lines("I alt (Samlet fertilitet);en;age",ctl_file, append = TRUE)
    write_lines("I alt (Samlet fertilitet);da;alder",ctl_file, append = TRUE)
    write_lines("I alt (Samlet fertilitet);kl;alder kl",ctl_file, append = TRUE)
    #
    system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))

    #Delete file if it exists
    if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Elimination
